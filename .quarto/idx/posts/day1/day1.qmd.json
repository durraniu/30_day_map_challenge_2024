{"title":"Day 1: Points","markdown":{"yaml":{"title":"Day 1: Points","date":"2024-11-01","categories":["points","crashapi","tigris"],"cache":true},"headingText":"Data","containsRefs":false,"markdown":"\n\n\nI used the [crashapi](https://github.com/elipousson/crashapi) package to gather fatal vehicle crashes for New York city for 2019-2020. Before looking at the maps, recall that stay-at-home orders were given in 2020 due to COVID-19. Therefore, the number of fatal crashes were expected to decrease in 2020 compared to 2019.\n\n```{r data}\n# devtools::install_github(\"elipousson/crashapi\")\nlibrary(crashapi)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(tigris)\nlibrary(patchwork)\n```\n\nThere are 5 counties in New York City, so I made a function to download county data using the `crashapi` package:\n\n```{r}\nget_ny_county_data <- function(county){\n  crashapi::get_fars(\n    year = c(2019, 2020),\n    state = \"New York\",\n    county = county,\n    details = FALSE,\n    geometry = TRUE\n  )\n}\n\nny_counties <-  c(\"New York County\", \"Kings County\", \n    \"Queens County\", \"Bronx County\",\n    \"Richmond County\")\n\nny_crashes <- purrr::map(\n  ny_counties,\n  ~ get_ny_county_data(.x)\n) \n\nny_crashes <- purrr::set_names(ny_crashes, ny_counties) \n```\n\nThen I created two lists of dataframes for each year:\n\n```{r}\nny_crashes19 <- purrr::map(ny_crashes, ~ .x |>\n                             janitor::clean_names() |> \n                             dplyr::filter(case_year == \"2019\"))\nny_crashes20 <- purrr::map(ny_crashes, ~ .x |> \n                             janitor::clean_names() |> \n                             dplyr::filter(case_year == \"2020\"))\n```\n\n### City Boundary\n\nCity boundary was downloaded using the `tigris` package:\n\n```{r}\n#| echo: true\nny_places <- places(state = \"NY\", cb = TRUE, progress_bar = FALSE)\nnyc_boundary <- ny_places[ny_places$NAME == \"New York\", ]\n\n# save(ny_crashes19, ny_crashes20, nyc_boundary, file = here::here(\"posts/day1/nyc_data.rda\"))\n```\n\n## Point Maps\n\nFinally, I was ready to visualize the single-vehicle fatal crashes in different counties. The function below does exactly that for a given year and county:\n\n```{r}\nplot_county_crashes <- function(crash_list, num, total_vehs = \"1\"){\n  dataset <- crash_list[[num]]\n  county <- names(crash_list[num])\n  num_cases <- nrow(dataset)\n  year <- unique(dataset$case_year)\n  \n  ggplot() +\n  geom_sf(data = nyc_boundary, fill = NA, color = \"grey50\") +\n  geom_sf(\n    data = dataset |> \n      dplyr::filter(totalvehicles == total_vehs),\n    aes(color =  totalvehicles),\n    alpha = 0.5\n  ) +\n  labs(title = paste0(county, \" (\", year, \")\"),\n       subtitle = paste0(\" (# of crashes: \", num_cases, \")\")) +\n  theme_void() +\n  theme(legend.position = \"none\")\n}\n```\n\nAnd the following function plots the same county for both years:\n\n```{r}\ncreate_combined_plot <- function(num,\n                                 list1 = ny_crashes19,\n                                 list2 = ny_crashes20\n                                 ){\n  plot_county_crashes(list1, num) | plot_county_crashes(list2, num)\n}\n```\n\n### Maps\n\n```{r}\ncreate_combined_plot(1)\ncreate_combined_plot(2)\ncreate_combined_plot(4)\ncreate_combined_plot(5)\n```\n\nBronx county had twice the crashes in 2020 compared to 2019!\n\nAnd something is wrong with the data for Queens county:\n\n```{r}\ncreate_combined_plot(3)\n```\n\n\n","srcMarkdownNoYaml":"\n\n## Data\n\nI used the [crashapi](https://github.com/elipousson/crashapi) package to gather fatal vehicle crashes for New York city for 2019-2020. Before looking at the maps, recall that stay-at-home orders were given in 2020 due to COVID-19. Therefore, the number of fatal crashes were expected to decrease in 2020 compared to 2019.\n\n```{r data}\n# devtools::install_github(\"elipousson/crashapi\")\nlibrary(crashapi)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(tigris)\nlibrary(patchwork)\n```\n\nThere are 5 counties in New York City, so I made a function to download county data using the `crashapi` package:\n\n```{r}\nget_ny_county_data <- function(county){\n  crashapi::get_fars(\n    year = c(2019, 2020),\n    state = \"New York\",\n    county = county,\n    details = FALSE,\n    geometry = TRUE\n  )\n}\n\nny_counties <-  c(\"New York County\", \"Kings County\", \n    \"Queens County\", \"Bronx County\",\n    \"Richmond County\")\n\nny_crashes <- purrr::map(\n  ny_counties,\n  ~ get_ny_county_data(.x)\n) \n\nny_crashes <- purrr::set_names(ny_crashes, ny_counties) \n```\n\nThen I created two lists of dataframes for each year:\n\n```{r}\nny_crashes19 <- purrr::map(ny_crashes, ~ .x |>\n                             janitor::clean_names() |> \n                             dplyr::filter(case_year == \"2019\"))\nny_crashes20 <- purrr::map(ny_crashes, ~ .x |> \n                             janitor::clean_names() |> \n                             dplyr::filter(case_year == \"2020\"))\n```\n\n### City Boundary\n\nCity boundary was downloaded using the `tigris` package:\n\n```{r}\n#| echo: true\nny_places <- places(state = \"NY\", cb = TRUE, progress_bar = FALSE)\nnyc_boundary <- ny_places[ny_places$NAME == \"New York\", ]\n\n# save(ny_crashes19, ny_crashes20, nyc_boundary, file = here::here(\"posts/day1/nyc_data.rda\"))\n```\n\n## Point Maps\n\nFinally, I was ready to visualize the single-vehicle fatal crashes in different counties. The function below does exactly that for a given year and county:\n\n```{r}\nplot_county_crashes <- function(crash_list, num, total_vehs = \"1\"){\n  dataset <- crash_list[[num]]\n  county <- names(crash_list[num])\n  num_cases <- nrow(dataset)\n  year <- unique(dataset$case_year)\n  \n  ggplot() +\n  geom_sf(data = nyc_boundary, fill = NA, color = \"grey50\") +\n  geom_sf(\n    data = dataset |> \n      dplyr::filter(totalvehicles == total_vehs),\n    aes(color =  totalvehicles),\n    alpha = 0.5\n  ) +\n  labs(title = paste0(county, \" (\", year, \")\"),\n       subtitle = paste0(\" (# of crashes: \", num_cases, \")\")) +\n  theme_void() +\n  theme(legend.position = \"none\")\n}\n```\n\nAnd the following function plots the same county for both years:\n\n```{r}\ncreate_combined_plot <- function(num,\n                                 list1 = ny_crashes19,\n                                 list2 = ny_crashes20\n                                 ){\n  plot_county_crashes(list1, num) | plot_county_crashes(list2, num)\n}\n```\n\n### Maps\n\n```{r}\ncreate_combined_plot(1)\ncreate_combined_plot(2)\ncreate_combined_plot(4)\ncreate_combined_plot(5)\n```\n\nBronx county had twice the crashes in 2020 compared to 2019!\n\nAnd something is wrong with the data for Queens county:\n\n```{r}\ncreate_combined_plot(3)\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"day1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"lux","title-block-banner":true,"license":"CC BY","toc-title":"Table of contents","toc-location":"left","author":[{"name":"Umair Durrani","url":"https://umairdurrani.com/"}],"citation":true,"title":"Day 1: Points","date":"2024-11-01","categories":["points","crashapi","tigris"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}