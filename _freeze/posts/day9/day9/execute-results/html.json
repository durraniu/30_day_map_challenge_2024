{
  "hash": "7590248be43dd0ec672b54f749929e57",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 9: AI only\"\ndate: \"2024-11-09\"\ncategories: [AI, httr2]\nimage: map.png\n---\n\n\n\n## Using AI to create a map\n\nI used the [Cloudflare Workers AI API](https://developers.cloudflare.com/workers-ai/models/stable-diffusion-xl-base-1.0/) to use a Stable Diffusion model for generating a map.\n\nTo use their REST API, I loaded the `httr2` package and others:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(magick)\nlibrary(osmdata)\nlibrary(ggplot2)\n```\n:::\n\n\n\n### Functions\n\nThe following function creates a request object to request an image from the model by providing a prompt and drawing instructions. You need an `ACCOUNT_ID` and an `API_KEY` from Cloudflare Workers AI to use this service.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreq_single_image <- function(prompt,\n                             instructions,\n                             ACCOUNT_ID = Sys.getenv(\"ACCOUNT_ID\"),\n                             API_KEY = Sys.getenv(\"API_KEY\"),\n                             base_url = \"https://api.cloudflare.com/client/v4/accounts/\"){\n\n  url_img <- paste0(\n    \"https://api.cloudflare.com/client/v4/accounts/\", ACCOUNT_ID, \n    # \"/ai/run/@cf/bytedance/stable-diffusion-xl-lightning\"\n    \"/ai/run/@cf/stabilityai/stable-diffusion-xl-base-1.0\"\n  )\n\n  # Create the request\n  httr2::request(url_img) |>\n    httr2::req_headers(\n      \"Authorization\" = paste(\"Bearer\", API_KEY)\n    ) |>\n    httr2::req_body_json(list(prompt = paste0(\n      prompt, \" \",\n      instructions\n    ))) |>\n    httr2::req_method(\"POST\")\n}\n```\n:::\n\n\n\nAfter creating and performing a request, I needed to check if the request was successful. If it were, I could extract the image as raw binary object using this function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_image <- function(response){\n  if (response$status_code == 200){\n    png_img <- httr2::resp_body_raw(response)\n  } else{\n    png_img <- NULL\n  }\n  png_img\n}\n```\n:::\n\n\n\n### Requesting a map (image) from Stable Diffusion\n\nIn the following code chunk, I asked the AI to: \n\n> \"Create a map of primary and secondary roads in Lahore, Pakistan\"  \n\nI also provided these drawing instructions:  \n\n> \"Create this map in OpenStreetMap style\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrawing_instructions <- \"Create this map in OpenStreetMap style\"\n\nrequest <- req_single_image(\n  \"Create a map of primary and secondary roads in Lahore, Pakistan\", \n  drawing_instructions\n  )\n\nresponse <- request |> \n  httr2::req_perform()\n\nraw_image <- get_image(response)\n\nmagick::image_write(\n  magick::image_read(raw_image),\n  path = here::here(\"posts/day9/map.png\")\n  )\n```\n:::\n\n\n\n\n## Get the actual map\n\nFor comparison, I also got the actual roads from open street map service via `osmdata` package and then plotted it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlhr_bbox <- osmdata::getbb(\"Lahore, Pakistan\")\nlhr_roads <- (opq (bbox = lhr_bbox) |> \n    add_osm_feature (key = \"highway\", value = c(\"primary\", \"secondary\")) |> \n  osmdata_sf ())$osm_lines\n\nlhr_roads_map <- ggplot(lhr_roads) + \n  geom_sf()\n\nggsave(filename = here::here(\"posts/day9/roads.png\"), lhr_roads_map, width = 5, height = 5, units = \"in\")\n```\n:::\n\n\n\n\n## Map\n\nAnd here's the side by side result: \n\n::: {#fig-roads layout-ncol=2}\n\n![AI](map.png){#fig-ai}\n\n![Actual](roads.png){#fig-actual}\n\nPrimary and Secondary Roads in Lahore, Pakistan\n:::\n\n### Conclusion\n\nAI-generated map is obviously incorrect, but it captures the circular road network that Lahore has.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}